<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.grafolioclone.mapper.PostMapper">

  <resultMap type="PostDto" id="PostMap">
   <id     property="postNo"      column="POST_NO"/>
   <result property="title"   column="TITLE"/>
   <result property="contents"   column="CONTENTS"/>
   <result property="hit"   column="HIT"/>
   <result property="createDt"   column="CREATE_DT"/>
   <result property="modifyDt"      column="MODIFY_DT"/>
   <result property="category" column="CATEGORY"/>
   <association property="user" javaType="UserDto">
     <id     property="userNo" column="USER_NO" />
     <result property="email"  column="EMAIL" />
   </association>
  </resultMap>
  
  
  <resultMap type="CommentDto" id="CommentMap">
   <id     property="commentNo"      column="COMMENT_NO"/>
   <result property="contents"   column="CONTENTS"/>
   <result property="createDt"   column="CREATE_DT"/>
   <result property="state"   column="STATE"/>
   <result property="depth"   column="DEPTH"/>
   <result property="groupNo"   column="GROUP_NO"/>
   <result property="postNo"   column="POST_NO"/>
   <association property="user" javaType="UserDto">
     <id     property="userNo" column="USER_NO" />
     <result property="email"  column="EMAIL" />
   </association>
  </resultMap>

  <insert id="insertPost"
          parameterType="PostDto">
    INSERT INTO POST_T (
        POST_NO
      , TITLE
      , CONTENTS
      , USER_NO
      , CREATE_DT
      , MODIFY_DT
      , CATEGORY
    ) VALUES (
        POST_SEQ.NEXTVAL
      , #{title}
      , #{contents}
      , #{user.userNo}
      , CURRENT_TIMESTAMP
      , CURRENT_TIMESTAMP
      , #{category}
    )
  </insert>
  
  <!-- 전체 블로그 게시글 수 -->
  <select id="getPostCount"
          resultType="int">
    SELECT COUNT(*)
      FROM POST_T
  </select>
  
  
  <!-- 블로그 게시글 목록 -->
  <select id="getPostList"
          parameterType="Map"
          resultMap="PostMap">
    SELECT POST_NO, TITLE, CONTENTS, HIT, USER_NO, EMAIL, CREATE_DT, MODIFY_DT, CATEGORY
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY P.POST_NO DESC) AS RN, P.POST_NO, P.TITLE, P.CONTENTS, P.HIT, U.USER_NO, U.EMAIL, P.CREATE_DT, P.MODIFY_DT, P.CATEGORY
              FROM USER_T U INNER JOIN POST_T P
                ON U.USER_NO = P.USER_NO)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 블로그 게시글 목록 카테고리로 검색 -->
  <select id="getPostListByCategory"
          parameterType="Map"
          resultMap="PostMap">
    SELECT POST_NO, TITLE, CONTENTS, HIT, USER_NO, EMAIL, CREATE_DT, MODIFY_DT, CATEGORY
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY P.POST_NO DESC) AS RN, P.POST_NO, P.TITLE, P.CONTENTS, P.HIT, U.USER_NO, U.EMAIL, P.CREATE_DT, P.MODIFY_DT, P.CATEGORY
              FROM USER_T U INNER JOIN POST_T P
                ON U.USER_NO = P.USER_NO
             WHERE P.CATEGORY = #{category})
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!--  -->
  <update id="updateHit">
    UPDATE POST_T
       SET HIT = HIT + 1
     WHERE POST_NO = #{postNo}
  </update>
  
  <!-- 블로그 게시글 내용 -->
  <select id="getPostByNo"
          resultMap="PostMap">
    SELECT POST_NO, TITLE, CONTENTS, HIT, USER_NO, EMAIL, CREATE_DT, MODIFY_DT, CATEGORY
      FROM (SELECT P.POST_NO, P.TITLE, P.CONTENTS, P.HIT, U.USER_NO, U.EMAIL, P.CREATE_DT, P.MODIFY_DT, P.CATEGORY
              FROM USER_T U INNER JOIN POST_T P
                ON U.USER_NO = P.USER_NO
             WHERE P.POST_NO = #{postNO})
   </select>
   
   <!-- 포스트 내용 수정 -->
   <update id="updatePost"
        parameterType="PostDto">
    UPDATE POST_T
       SET TITLE = #{title}
         , CONTENTS = #{contents}
         , MODIFY_DT = CURRENT_TIMESTAMP
         , CATEGORY = #{category}
     WHERE POST_NO = #{postNo}
  </update>
   
   <delete id="removePost">
    DELETE
      FROM POST_T
     WHERE POST_NO = #{postNo}      
   </delete>
   
   <insert id="insertComment"
           parameterType="CommentDto">
     INSERT INTO COMMENT_T (
       COMMENT_NO,
       CONTENTS,
       CREATE_DT,
       STATE,
       DEPTH,
       GROUP_NO,
       USER_NO,
       POST_NO
     ) VALUES (
       COMMENT_SEQ.NEXTVAL,
       #{contents},
       CURRENT_TIMESTAMP,
       1,
       0,
       COMMENT_SEQ.CURRVAL,
       #{user.userNo},
       #{postNo}
     )
   </insert>
   
   <select id="getCommentCount"
           resultType="int">
     SELECT COUNT(*)
       FROM COMMENT_T
      WHERE POST_NO = #{postNo}
   </select>
   
   <select id="getCommentList"
           parameterType="Map"
           resultMap="CommentMap">
     SELECT COMMENT_NO, CONTENTS, CREATE_DT, STATE, DEPTH, GROUP_NO, USER_NO, EMAIL, POST_NO
       FROM (SELECT ROW_NUMBER() OVER(ORDER BY C.GROUP_NO DESC, C.DEPTH ASC, C.COMMENT_NO DESC) AS RN
                  , C.COMMENT_NO, C.CONTENTS, C.STATE, C.DEPTH, C.GROUP_NO, C.CREATE_DT, C.POST_NO
                  , U.USER_NO, U.EMAIL
              FROM USER_T U INNER JOIN COMMENT_T C
                ON U.USER_NO = C.USER_NO
             WHERE C.POST_NO = #{postNo})
      WHERE RN BETWEEN #{begin} AND #{end}
   </select>
   
   <insert id="insertReply"
           parameterType="CommentDto">
     INSERT INTO COMMENT_T (
       COMMENT_NO,
       CONTENTS,
       CREATE_DT,
       STATE,
       DEPTH,
       GROUP_NO,
       USER_NO,
       POST_NO
     ) VALUES (
       COMMENT_SEQ.NEXTVAL,
       #{contents},
       CURRENT_TIMESTAMP,
       1,
       1,
       #{groupNo},
       #{user.userNo},
       #{postNo}
     )
   </insert>
   
  <update id="removeComment">
    UPDATE COMMENT_T
       SET STATE = 0
     WHERE COMMENT_NO = #{commentNo}
  </update>
  
  <delete id="removeCommentByPostNo">
    DELETE 
      FROM COMMENT_T
     WHERE POST_NO = #{postNo}
  </delete>
   
   <insert id="insertLike"
           parameterType="LikeDto">
     INSERT INTO LIKE_T (
       LIKE_NO,
       POST_NO,
       USER_NO,
       CREATE_DT
     ) VALUES (
       LIKE_SEQ.NEXTVAL,
       #{postNo},
       #{userNo},
       CURRENT_TIMESTAMP
     )        
   </insert>
   
   <delete id="removeLike"
           parameterType="LikeDto">
     DELETE 
       FROM LIKE_T
      WHERE POST_NO = #{postNo}
        AND USER_NO = #{userNo}
   </delete>
   
   <select id="getLikeCountByPostNo"
           resultType="int">
     SELECT COUNT(*)
       FROM LIKE_T
      WHERE POST_NO = #{postNo}
   </select>
   
   <select id="checkLikeStatus"
           parameterType="LikeDto"
           resultType="int">
     SELECT COUNT(*)
       FROM LIKE_T
      WHERE POST_NO = #{postNo}
        AND USER_NO = #{userNo}
   </select>
   
</mapper>